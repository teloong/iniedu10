---
import AdminLayout from "../layouts/AdminLayout.astro";
import AdminSidebar from "../components/AdminSidebar.astro";
import "../styles/global.css";
---

<AdminLayout title="Daftar Ebook Perpustakaan">
  <div class="min-h-screen bg-gray-50 flex">
    <div class="sticky top-0 h-screen hidden md:block">
      <AdminSidebar active="daftar-ebook" />
    </div>
    <main class="flex-1 overflow-x-auto">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="flex justify-between items-center mb-4">
          <h1 class="text-2xl font-bold text-blue-700">
            Daftar E-Book Perpustakaan
          </h1>
          <a href="/admin-tambah-ebook" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Tambah E-book Baru
          </a>
        </div>
        <div class="flex flex-col md:flex-row gap-4 mb-6">
          <input
            id="search-input"
            type="text"
            placeholder="Cari judul atau penulis..."
            class="w-full md:w-1/2 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
          />
          <select
            id="category-filter"
            class="w-full md:w-1/2 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
          >
            <option value="">Semua Kategori</option>
            <!-- Categories populated by script -->
          </select>
        </div>

        <!-- NEW: Grid Container -->
        <div id="ebook-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          <!-- Ebook cards will be populated here -->
        </div>

        <!-- Pagination Container -->
        <div id="pagination-container" class="mt-8 flex justify-center items-center space-x-2"></div>
        
      </div>
    </main>
  </div>
  <script is:inline>
    // State
    let allBooks = [], filteredBooks = [], categories = [];
    let currentPage = 1;
    const pageSize = 25;

    // DOM Elements
    const searchInput = document.getElementById("search-input");
    const categoryFilter = document.getElementById("category-filter");
    const ebookGrid = document.getElementById("ebook-grid");
    const paginationContainer = document.getElementById("pagination-container");

    // Functions
    function renderPage(page) {
      currentPage = page;
      if (!ebookGrid) return;
      const totalPages = Math.ceil(filteredBooks.length / pageSize) || 1;
      if (currentPage > totalPages) currentPage = totalPages;
      if (currentPage < 1) currentPage = 1;

      const start = (currentPage - 1) * pageSize;
      const pageBooks = filteredBooks.slice(start, start + pageSize);
      
      ebookGrid.innerHTML = "";
      if (pageBooks.length === 0) {
        ebookGrid.innerHTML = '<div class="col-span-full text-center text-gray-500 py-10">Tidak ada e-book yang cocok.</div>';
      } else {
        pageBooks.forEach(book => {
          const card = document.createElement("div");
          card.className = "bg-white rounded-lg shadow-md overflow-hidden flex flex-col transition-transform transform hover:-translate-y-1";
          const coverImg = book.cover_image_url ? `<img src="${book.cover_image_url}" alt="${book.title}" class="w-full h-48 object-cover">` : `<div class="w-full h-48 bg-gray-200 flex items-center justify-center text-gray-400">No Cover</div>`;
          card.innerHTML = `
            ${coverImg}
            <div class="p-4 flex-grow flex flex-col">
              <h3 class="font-bold text-md text-gray-800 flex-grow">${book.title}</h3>
              <p class="text-sm text-gray-600 mt-1">${book.author || "-"}</p>
              <p class="text-xs text-gray-500 mt-2">Kategori: ${book.category_name || "-"}</p>
            </div>
            <div class="p-4 bg-gray-50 border-t flex justify-between items-center">
              <a href="/admin-edit-ebook?id=${book.id}" class="text-sm font-medium text-blue-600 hover:underline">Edit</a>
              <button data-id="${book.id}" class="text-sm font-medium text-red-600 hover:underline delete-btn">Hapus</button>
            </div>`;
          ebookGrid.appendChild(card);
        });
      }
      renderPagination(totalPages);
    }

    function renderPagination(totalPages) {
      if (!paginationContainer || totalPages <= 1) {
        if(paginationContainer) paginationContainer.innerHTML = "";
        return;
      }
      let html = `<button class="px-3 py-1 rounded-md text-sm ${currentPage === 1 ? 'bg-gray-200 text-gray-500' : 'bg-white hover:bg-gray-50'}" ${currentPage === 1 ? 'disabled' : ''} data-page="prev">&laquo; Prev</button>`;
      for (let i = 1; i <= totalPages; i++) {
        html += `<button class="px-3 py-1 rounded-md text-sm ${i === currentPage ? 'bg-blue-600 text-white' : 'bg-white hover:bg-gray-50'}" data-page="${i}">${i}</button>`;
      }
      html += `<button class="px-3 py-1 rounded-md text-sm ${currentPage === totalPages ? 'bg-gray-200 text-gray-500' : 'bg-white hover:bg-gray-50'}" ${currentPage === totalPages ? 'disabled' : ''} data-page="next">Next &raquo;</button>`;
      paginationContainer.innerHTML = html;
      paginationContainer.querySelectorAll('button[data-page]').forEach(btn => {
        btn.onclick = () => {
          let target = btn.dataset.page;
          if (target === 'prev') renderPage(currentPage - 1);
          else if (target === 'next') renderPage(currentPage + 1);
          else renderPage(parseInt(target));
        };
      });
    }

    function applyFilters() {
      const searchTerm = searchInput.value.toLowerCase();
      const categoryId = categoryFilter.value;
      filteredBooks = allBooks.filter(book => 
        ((book.title || '').toLowerCase().includes(searchTerm) || (book.author || '').toLowerCase().includes(searchTerm)) && 
        (!categoryId || String(book.category_id) === categoryId)
      );
      renderPage(1);
    }

    async function loadData() {
      if (!ebookGrid) return;
      ebookGrid.innerHTML = `<div class="col-span-full text-center py-10">Memuat...</div>`;
      try {
        const res = await fetch("https://iniedu.id/api/admin/ebook_handler.php");
        const data = await res.json();
        if (!data.success) throw new Error(data.message);
        categories = data.categories || [];
        allBooks = (data.books || []).map(book => ({ ...book, category_name: categories.find(c => c.id == book.category_id)?.name || "-" }));
        
        categoryFilter.innerHTML = '<option value="">Semua Kategori</option>' + categories.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
        applyFilters();
      } catch (error) {
        ebookGrid.innerHTML = `<div class="col-span-full text-center text-red-500 py-10">Error: ${error.message}</div>`;
      }
    }

    async function handleDelete(e) {
      const id = e.target.dataset.id;
      if (!id || !confirm("Yakin ingin menghapus e-book ini?")) return;
      try {
        const res = await fetch("https://iniedu.id/api/admin/ebook_handler.php", { method: 'DELETE', headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${localStorage.getItem('adminAuthToken')}`}, body: JSON.stringify({ id }) });
        const result = await res.json();
        if (!result.success) throw new Error(result.message);
        alert("E-book berhasil dihapus.");
        allBooks = allBooks.filter(book => book.id != id);
        applyFilters();
      } catch (error) {
        alert(`Gagal menghapus: ${error.message}`);
      }
    }

    // Event Listeners
    document.addEventListener("DOMContentLoaded", loadData);
    searchInput?.addEventListener("input", applyFilters);
    categoryFilter?.addEventListener("change", applyFilters);
    ebookGrid?.addEventListener("click", e => e.target.classList.contains('delete-btn') && handleDelete(e));
  </script>
</AdminLayout>

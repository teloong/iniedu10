---
import AdminLayout from "../layouts/AdminLayout.astro";
import AdminSidebar from "../components/AdminSidebar.astro";
import JwtAuth from "../components/JwtAuth.astro";
import "../styles/global.css";
---

<AdminLayout title="Manajemen Tema E-Book">
  <JwtAuth />
  <div class="min-h-screen bg-gray-50 flex">
    <div class="sticky top-0 h-screen hidden md:block">
      <AdminSidebar active="tema-ebook" />
    </div>
    <main class="flex-1 overflow-x-auto">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="flex justify-between items-center mb-4">
          <h1 class="text-2xl font-bold text-blue-700">
            Manajemen Tema E-Book
          </h1>
          <button
            id="add-theme-btn"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Tambah Tema Baru
          </button>
        </div>
        <div class="flex flex-col md:flex-row gap-4 mb-6">
          <input
            id="search-input"
            type="text"
            placeholder="Cari nama tema..."
            class="w-full md:w-1/2 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
          />
          <select
            id="category-filter"
            class="w-full md:w-1/2 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
          >
            <option value="">Semua Kategori</option>
            <!-- Categories populated by script -->
          </select>
        </div>

        <!-- Table Container -->
        <div
          id="theme-table-container"
          class="bg-white shadow-md rounded-lg overflow-hidden"
        >
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"
                  >Nama Tema</th
                >
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"
                  >Kategori</th
                >
                <th scope="col" class="relative px-6 py-3\">
                  <span class="sr-only">Actions</span>
                </th>
              </tr>
            </thead>
            <tbody
              id="theme-table-body"
              class="bg-white divide-y divide-gray-200"
            >
              <!-- Theme rows will be populated here -->
            </tbody>
          </table>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal for Add/Edit Theme -->
  <div
    id="theme-modal"
    class="fixed z-10 inset-0 overflow-y-auto hidden"
    aria-labelledby="modal-title"
    role="dialog"
    aria-modal="true"
  >
    <div
      class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
    >
      <div
        class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
        aria-hidden="true"
      >
      </div>
      <span
        class="hidden sm:inline-block sm:align-middle sm:h-screen"
        aria-hidden="true">&#8203;</span
      >
      <div
        class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
      >
        <form id="theme-form">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <h3
              class="text-lg leading-6 font-medium text-gray-900"
              id="modal-title"
            >
              Tambah Tema Baru
            </h3>
            <input type="hidden" id="theme-id" name="id" />
            <div class="mt-4">
              <label
                for="theme-name"
                class="block text-sm font-medium text-gray-700\"
                >Nama Tema</label
              >
              <input
                type="text"
                name="name"
                id="theme-name"
                class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                required
              />
            </div>
            <div class="mt-4">
              <label
                for="theme-category"
                class="block text-sm font-medium text-gray-700\">Kategori</label
              >
              <select
                id="theme-category"
                name="category_id"
                class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                required
              >
                <!-- Options populated by script -->
              </select>
            </div>
          </div>
          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="submit"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm\"
              >Simpan</button
            >
            <button
              type="button"
              id="cancel-btn"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"
              >Batal</button
            >
          </div>
        </form>
      </div>
    </div>
  </div>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      // --- State & Config ---
      let allThemes = [];
      let categories = [];
      const API_URL = "https://iniedu.id/api/admin/tema_ebook_handler.php";
      const token = localStorage.getItem("adminAuthToken"); // Use the correct, centralized token key

      // --- DOM Elements ---
      const searchInput = document.getElementById("search-input");
      const categoryFilter = document.getElementById("category-filter");
      const themeTableBody = document.getElementById("theme-table-body");
      const addThemeBtn = document.getElementById("add-theme-btn");
      const themeModal = document.getElementById("theme-modal");
      const themeForm = document.getElementById("theme-form");
      const cancelBtn = document.getElementById("cancel-btn");
      const modalTitle = document.getElementById("modal-title");
      const themeIdInput = document.getElementById("theme-id");
      const themeNameInput = document.getElementById("theme-name");
      const themeCategorySelect = document.getElementById("theme-category");

      // --- Functions ---
      function renderTable(themesToRender) {
        if (!themeTableBody) return;
        themeTableBody.innerHTML = "";
        if (themesToRender.length === 0) {
          themeTableBody.innerHTML =
            '<tr><td colspan="3" class="text-center text-gray-500 py-10">Tidak ada data yang cocok.</td></tr>';
          return;
        }
        themesToRender.forEach((theme) => {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">${theme.name}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">${theme.category_name || "N/A"}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <button data-id="${theme.id}" class="text-indigo-600 hover:text-indigo-900 edit-btn">Edit</button>
              <button data-id="${theme.id}" class="text-red-600 hover:text-red-900 ml-4 delete-btn">Hapus</button>
            </td>
          `;
          themeTableBody.appendChild(row);
        });
      }

      function populateCategoryFilters() {
        if (
          !(categoryFilter instanceof HTMLSelectElement) ||
          !(themeCategorySelect instanceof HTMLSelectElement)
        )
          return;

        categoryFilter.innerHTML = '<option value="">Semua Kategori</option>';
        themeCategorySelect.innerHTML =
          '<option value="">Pilih Kategori</option>';

        categories.forEach((cat) => {
          const option = document.createElement("option");
          option.value = String(cat.id);
          option.textContent = cat.name;
          categoryFilter.appendChild(option.cloneNode(true));
          themeCategorySelect.appendChild(option);
        });
      }

      function applyFilters() {
        if (
          !(searchInput instanceof HTMLInputElement) ||
          !(categoryFilter instanceof HTMLSelectElement)
        )
          return;
        const searchTerm = searchInput.value.toLowerCase();
        const categoryId = categoryFilter.value;

        const filteredThemes = allThemes.filter((theme) => {
          const matchesSearch = (theme.name || "")
            .toLowerCase()
            .includes(searchTerm);
          const matchesCategory =
            !categoryId || String(theme.category_id) === categoryId;
          return matchesSearch && matchesCategory;
        });
        renderTable(filteredThemes);
      }

      function openModal(theme = null) {
        themeForm.reset();
        if (theme) {
          modalTitle.textContent = "Edit Tema";
          themeIdInput.value = theme.id;
          themeNameInput.value = theme.name;
          themeCategorySelect.value = theme.category_id;
        } else {
          modalTitle.textContent = "Tambah Tema Baru";
          themeIdInput.value = "";
        }
        themeModal.classList.remove("hidden");
      }

      function closeModal() {
        themeModal.classList.add("hidden");
      }

      async function loadData() {
        if (!themeTableBody) return;


        try {
          const response = await fetch(API_URL, {
            headers: { Authorization: `Bearer ${token}` },
          });

          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const errorMessage = errorData.message || `Gagal memuat data (Status: ${response.status})`;
            throw new Error(errorMessage);
          }

          const data = await response.json();
          if (!data.success)
            throw new Error(data.message || "Gagal mengambil data.");

          categories = data.categories || [];
          allThemes = (data.themes || []).map((theme) => {
            const category = categories.find((c) => c.id == theme.category_id);
            return {
              ...theme,
              category_name: category ? category.name : "Unknown",
            };
          });

          populateCategoryFilters();
          applyFilters();
        } catch (error) {

          const message =
            error instanceof Error
              ? error.message
              : "Terjadi kesalahan tidak diketahui.";
          themeTableBody.innerHTML = `<tr><td colspan="3" class="text-center text-red-500 py-10">Gagal memuat data: ${message}</td></tr>`;
        }
      }

      async function handleFormSubmit(event) {
        event.preventDefault();
        const formData = new FormData(themeForm);
        const themeData = Object.fromEntries(formData.entries());

        try {
          const response = await fetch(API_URL, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify(themeData),
          });

          const result = await response.json();
          if (!response.ok || !result.success) {
            throw new Error(result.message || "Gagal menyimpan tema.");
          }

          closeModal();
          loadData(); // Refresh data
        } catch (error) {

          alert(`Error: ${error.message}`);
        }
      }

      async function handleDelete(themeId) {
        if (!confirm("Anda yakin ingin menghapus tema ini?")) return;

        try {
          const response = await fetch(API_URL, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ id: themeId }),
          });

          const result = await response.json();
          if (!response.ok || !result.success) {
            throw new Error(result.message || "Gagal menghapus tema.");
          }

          loadData(); // Refresh data
        } catch (error) {

          alert(`Error: ${error.message}`);
        }
      }

      // --- Event Listeners ---
      searchInput.addEventListener("input", applyFilters);
      categoryFilter.addEventListener("change", applyFilters);
      addThemeBtn.addEventListener("click", () => openModal());
      cancelBtn.addEventListener("click", closeModal);
      themeForm.addEventListener("submit", handleFormSubmit);

      themeTableBody.addEventListener("click", (event) => {
        const target = event.target;
        if (target.classList.contains("edit-btn")) {
          const id = target.dataset.id;
          const themeToEdit = allThemes.find((t) => t.id == id);
          if (themeToEdit) openModal(themeToEdit);
        }
        if (target.classList.contains("delete-btn")) {
          const id = target.dataset.id;
          handleDelete(id);
        }
      });

      // --- Initial Load ---
      loadData();
    });
  </script>
</AdminLayout>

---
import Layout from '../layouts/Layout.astro';
import AdminSidebar from '../components/AdminSidebar.astro';
import '../styles/global.css';
---

<Layout title="Manajemen Tema E-Book">
  <div class="min-h-screen bg-[#f3f6fd] flex">
    <div class="sticky top-0 h-screen hidden md:block">
      <AdminSidebar active="tema-ebook" />
    </div>
    <main class="flex-1 overflow-x-auto">
      <div class="max-w-2xl mx-auto py-10">
        <h1 class="text-2xl font-bold mb-6 text-blue-900">Manajemen Tema E-Book</h1>
    <!-- Form tambah tema -->
    <form id="form-tambah-tema" class="flex gap-2 mb-6">
  <input type="text" id="tema-nama" placeholder="Nama Tema" class="border rounded px-3 py-2 flex-1" required />
  <input type="text" id="tema-slug" placeholder="Slug" class="border rounded px-3 py-2 w-48" required />
  <select id="tema-kategori" class="border rounded px-3 py-2 w-64" required>
    <option value="">Pilih Kategori</option>
  </select>
  <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded font-bold">Tambah</button>
</form>
    <!-- Daftar tema -->
    <table class="w-full bg-white rounded shadow text-left">
      <thead>
        <tr class="bg-blue-50">
          <th class="py-2 px-3">Nama Tema</th>
<th class="py-2 px-3">Slug</th>
<th class="py-2 px-3">Kategori</th>
<th class="py-2 px-3">Aksi</th>
        </tr>
      </thead>
      <tbody id="daftar-tema"></tbody>
    </table>
      </div>
    </main>
  </div>
  <script type="module">
    import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';
    const supabase = createClient('https://jcfizceoycwdvpqpwhrj.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpjZml6Y2VveWN3ZHZwcXB3aHJqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NzUzNzUsImV4cCI6MjA2NDE1MTM3NX0.Au9FzSYvpaX7SkaVrgJvIgK9fZu5Dq4cU_NI5iwY6aA');
    let kategoriMap = {};
let kategoriList = [];
async function fetchKategori() {
  const { data, error } = await supabase.from('ebook_categories').select('id,nama');
  if (data) {
    kategoriList = data;
    kategoriMap = {};
    data.forEach(kat => kategoriMap[kat.id] = kat.nama);
    // render dropdown
    const select = document.getElementById('tema-kategori');
    select.innerHTML = '<option value="">Pilih Kategori</option>' +
      data.map(kat => `<option value="${kat.id}">${kat.nama}</option>`).join('');
  }
}
async function fetchTema() {
  const { data, error } = await supabase.from('ebook_themes').select('*').order('created_at');
  const tbody = document.getElementById('daftar-tema');
  tbody.innerHTML = '';
  if (data) {
    data.forEach(t => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td class="py-2 px-3">${t.name}</td>
        <td class="py-2 px-3">${t.slug}</td>
        <td class="py-2 px-3">${kategoriMap[t.category_id] || '-'}</td>
        <td class="py-2 px-3">
          <button data-id="${t.id}" class="edit-btn text-blue-600 hover:underline mr-2">Edit</button>
          <button data-id="${t.id}" class="hapus-btn text-red-600 hover:underline">Hapus</button>
        </td>
      `;
      tbody.appendChild(tr);
    });
  }
}
fetchTema();

// Tambah tema
    document.getElementById('form-tambah-tema').addEventListener('submit', async (e) => {
      e.preventDefault();
      const name = document.getElementById('tema-nama').value.trim();
      const slug = document.getElementById('tema-slug').value.trim();
      const category_id = document.getElementById('tema-kategori').value;
      if (!name || !slug || !category_id) return;
      await supabase.from('ebook_themes').insert([{ name, slug, category_id }]);
      document.getElementById('tema-nama').value = '';
      document.getElementById('tema-slug').value = '';
      document.getElementById('tema-kategori').value = '';
      fetchTema();
    });

    // Delegasi tombol edit/hapus
    document.getElementById('daftar-tema').addEventListener('click', async (e) => {
      if (e.target.classList.contains('hapus-btn')) {
        if (!confirm('Yakin ingin menghapus tema ini?')) return;
        const id = e.target.getAttribute('data-id');
        await supabase.from('ebook_themes').delete().eq('id', id);
        fetchTema();
      }
      if (e.target.classList.contains('edit-btn')) {
  const id = e.target.getAttribute('data-id');
  const row = e.target.closest('tr');
  const namaCell = row.children[0];
  const slugCell = row.children[1];
  const kategoriCell = row.children[2];
  const namaLama = namaCell.textContent;
  const slugLama = slugCell.textContent;
  const kategoriLama = kategoriCell.textContent;
  namaCell.innerHTML = `<input type='text' value='${namaLama}' class='border rounded px-2 py-1 w-32' />`;
  slugCell.innerHTML = `<input type='text' value='${slugLama}' class='border rounded px-2 py-1 w-24' />`;
  kategoriCell.innerHTML = `<select class='border rounded px-2 py-1 w-48'>
    ${kategoriList.map(kat => `<option value='${kat.id}' ${kat.nama===kategoriLama?'selected':''}>${kat.nama}</option>`).join('')}
  </select>`;
  e.target.style.display = 'none';
  const saveBtn = document.createElement('button');
  saveBtn.textContent = 'Simpan';
  saveBtn.className = 'text-green-600 hover:underline mr-2';
  saveBtn.onclick = async () => {
    const newName = namaCell.querySelector('input').value.trim();
    const newSlug = slugCell.querySelector('input').value.trim();
    const newKategori = kategoriCell.querySelector('select').value;
    if (!newName || !newSlug || !newKategori) return;
    await supabase.from('ebook_themes').update({ name: newName, slug: newSlug, category_id: newKategori }).eq('id', id);
    fetchTema();
  };
  e.target.parentNode.insertBefore(saveBtn, e.target.nextSibling);
}
    });
  fetchKategori().then(fetchTema);
</script>
</Layout>

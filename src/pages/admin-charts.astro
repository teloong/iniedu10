---
import AdminLayout from "../layouts/AdminLayout.astro";
import AdminSidebar from "../components/AdminSidebar.astro";
import "../styles/global.css";
---

<AdminLayout title="Statistik Grafik Kursus">
  <div class="min-h-screen bg-gray-50 flex">
    <div class="sticky top-0 h-screen hidden md:block">
      <AdminSidebar active="admin-charts" />
    </div>
    <main class="flex-1 overflow-x-auto">
      <div class="w-full px-2 py-8">
        <h1 class="text-2xl font-bold mb-6 text-blue-800">
          Statistik Grafik Kursus
        </h1>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
          <div
            class="bg-white rounded-xl shadow p-12 flex flex-col items-center justify-center min-w-[320px] md:min-w-[520px] lg:min-w-[700px] xl:min-w-[860px] max-w-full"
          >
            <div class="text-base text-gray-500 mb-2">Total Uang Masuk</div>
            <div class="text-4xl font-bold text-green-600 mb-4" id="total-uang">
              -
            </div>
            <canvas
              id="chart-uang"
              width="560"
              height="320"
              style="filter: drop-shadow(0 8px 32px #10b98133);"></canvas>
          </div>
          <div
            class="bg-white rounded-xl shadow p-12 flex flex-col items-center min-w-[320px] md:min-w-[520px] lg:min-w-[700px] xl:min-w-[860px] max-w-full"
          >
            <canvas
              id="chart-kategori"
              width="560"
              height="560"
              style="filter: drop-shadow(0 8px 32px #2563eb33);"></canvas>
          </div>
        </div>
        <div class="bg-white rounded-xl shadow p-6 mt-4">
          <h3 class="text-lg font-bold mb-4">Jumlah Pembelian per Kategori</h3>
          <ul id="list-kategori" class="space-y-2 text-gray-700"></ul>
        </div>
      </div>
    </main>
  </div>
  <script
    src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"
    is:inline></script>
  <script
    src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"
    is:inline></script>
  <script
    src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.7/dist/umd/supabase.min.js"
    is:inline></script>
  <script is:inline>
    function waitDepsReady(cb) {
      if (window.Chart && window.ChartDataLabels && window.supabase) {
        cb();
      } else {
        setTimeout(() => waitDepsReady(cb), 100);
      }
    }
    function fetchChartData() {
      const supabaseUrl = "https://jcfizceoycwdvpqpwhrj.supabase.co";
      const supabaseKey =
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpjZml6Y2VveWN3ZHZwcXB3aHJqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NzUzNzUsImV4cCI6MjA2NDE1MTM3NX0.Au9FzSYvpaX7SkaVrgJvIgK9fZu5Dq4cU_NI5iwY6aA";
      const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
      supabase
        .from("pembelian_kursus")
        .select("nama_kursus, harga, waktu_pembelian")
        .eq("status_pembayaran", "PAID")
        .then(({ data, error }) => {
          window.chartData = { data, error };
          renderCharts();
        });
    }
    document.addEventListener("DOMContentLoaded", function () {
      waitDepsReady(function () {
        if (window.Chart && window.ChartDataLabels) {
          if (!window.Chart.registry.plugins.get("datalabels")) {
            window.Chart.register(window.ChartDataLabels);
          }
        }
        fetchChartData();
      });
    });
    function clearCanvas(id) {
      const canvas = document.getElementById(id);
      if (canvas) {
        const ctx = canvas.getContext("2d");
        ctx && ctx.clearRect(0, 0, canvas.width, canvas.height);
      }
    }
    function renderUangChart(labels, values) {
      clearCanvas("chart-uang");
      const canvas = document.getElementById("chart-uang");
      if (!canvas) return;
      const ctx = canvas.getContext("2d");
      if (!ctx) return;
      const gradient = ctx.createLinearGradient(0, 0, 0, 320);
      gradient.addColorStop(0, "rgba(16,185,129,0.5)");
      gradient.addColorStop(1, "rgba(16,185,129,0.05)");
      new window.Chart(ctx, {
        type: "line",
        data: {
          labels,
          datasets: [
            {
              label: "Total Uang Masuk",
              data: values,
              borderColor: "#10b981",
              backgroundColor: gradient,
              borderWidth: 4,
              tension: 0.4,
              pointRadius: 7,
              pointHoverRadius: 12,
              pointBackgroundColor: "#10b981",
              pointBorderColor: "#fff",
              pointBorderWidth: 3,
              fill: true,
            },
          ],
        },
        options: {
          responsive: true,
          animation: { duration: 1200, easing: "easeOutQuart" },
          plugins: {
            legend: { display: false },
            datalabels: {
              anchor: "end",
              align: "top",
              color: "#10b981",
              font: { weight: "bold", size: 15 },
              backgroundColor: "#fff",
              borderRadius: 5,
              padding: 4,
              formatter: function (value) {
                return "Rp" + value.toLocaleString("id-ID");
              },
            },
            tooltip: {
              callbacks: {
                label: function (context) {
                  return "Rp" + context.parsed.y.toLocaleString("id-ID");
                },
              },
            },
          },
          layout: { padding: 16 },
          scales: {
            x: {
              ticks: { color: "#222", font: { size: 14, weight: "bold" } },
              grid: { color: "rgba(16,185,129,0.08)" },
            },
            y: {
              beginAtZero: true,
              ticks: {
                color: "#222",
                font: { size: 14, weight: "bold" },
                callback: function (v) {
                  return "Rp" + v.toLocaleString("id-ID");
                },
              },
              grid: { color: "rgba(16,185,129,0.08)" },
            },
          },
        },
      });
    }
    function renderUangChartDummy() {
      const now = new Date();
      const labels = Array.from({ length: 7 }, (_, i) => {
        const d = new Date(now);
        d.setDate(now.getDate() - (6 - i));
        return d.toLocaleDateString("id-ID");
      });
      const values = [100000, 120000, 115000, 130000, 140000, 135000, 150000];
      renderUangChart(labels, values);
      const totalUangDiv = document.getElementById("total-uang");
      if (totalUangDiv)
        totalUangDiv.textContent =
          "Rp" + values[values.length - 1].toLocaleString("id-ID");
    }
    function renderCharts() {
      if (
        !window.chartData ||
        window.chartData.error ||
        !window.chartData.data
      ) {
        renderUangChartDummy();
        renderKategoriChartDummy();
        renderKategoriListDummy();
        const totalUangDiv = document.getElementById("total-uang");
        if (totalUangDiv) totalUangDiv.textContent = "Gagal memuat data";
        const list = document.getElementById("list-kategori");
        if (list)
          list.innerHTML =
            '<li class="text-red-500">Gagal memuat data statistik.</li>';
        return;
      }
      const now = new Date();
      const satuBulanLalu = new Date(now);
      satuBulanLalu.setDate(now.getDate() - 29);
      const data = window.chartData.data.filter((row) => {
        if (!row.waktu_pembelian) return false;
        const tgl = new Date(row.waktu_pembelian);
        return tgl >= satuBulanLalu && tgl <= now;
      });
      const uangPerTanggal = {};
      data.forEach((row) => {
        if (!row.waktu_pembelian) return;
        const tgl = new Date(row.waktu_pembelian).toLocaleDateString("id-ID");
        uangPerTanggal[tgl] = (uangPerTanggal[tgl] || 0) + (row.harga || 0);
      });
      const labels = Object.keys(uangPerTanggal).sort(
        (a, b) => new Date(a) - new Date(b)
      );
      let running = 0;
      const values = labels.map((tgl) => (running += uangPerTanggal[tgl]));
      renderUangChart(labels, values);
      let totalUang = values.length ? values[values.length - 1] : 0;
      const totalUangDiv = document.getElementById("total-uang");
      if (totalUangDiv)
        totalUangDiv.textContent = "Rp" + totalUang.toLocaleString("id-ID");
      const kategoriMap = {};
      data.forEach((row) => {
        if (typeof row.nama_kursus === "string") {
          let nama = row.nama_kursus.trim();
          if (!kategoriMap[nama]) kategoriMap[nama] = 0;
          kategoriMap[nama]++;
        }
      });
      renderKategoriChart(kategoriMap);
      renderKategoriList(kategoriMap);
    }
    function renderKategoriChart(kategoriMap) {
      clearCanvas("chart-kategori");
      const canvas = document.getElementById("chart-kategori");
      if (!canvas) return;
      // Atur tinggi canvas agar proporsional
      canvas.height = 340;
      const ctx = canvas.getContext("2d");
      if (!ctx) return;
      // gradient bar
      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, "rgba(37,99,235,0.55)");
      gradient.addColorStop(1, "rgba(37,99,235,0.05)");
      new window.Chart(ctx, {
        type: "bar",
        data: {
          labels: Object.keys(kategoriMap),
          datasets: [
            {
              label: "Pembelian Kursus",
              data: Object.values(kategoriMap),
              backgroundColor: gradient,
              borderColor: "rgba(37,99,235,1)",
              borderWidth: 2,
              borderRadius: 8,
              maxBarThickness: 48,
            },
          ],
        },
        options: {
          responsive: true,
          animation: {
            duration: 1200,
            easing: "easeOutQuart",
          },
          plugins: {
            legend: {
              display: false,
            },
            datalabels: {
              anchor: "end",
              align: "top",
              color: "#fff",
              backgroundColor: "#232b4d",
              borderRadius: 6,
              padding: 6,
              font: {
                weight: "bold",
                size: 14,
              },
              formatter: function (value) {
                return value;
              },
              clamp: true,
              clip: false,
            },
          },
          layout: {
            padding: { top: 40, right: 16, bottom: 16, left: 16 },
          },
          scales: {
            x: {
              ticks: {
                color: "#222",
                font: { size: 12, weight: "bold" },
                maxRotation: 30,
                minRotation: 0,
                autoSkip: false,
              },
              grid: { color: "rgba(37,99,235,0.08)" },
            },
            y: {
              beginAtZero: true,
              ticks: {
                color: "#222",
                font: { size: 13, weight: "bold" },
                stepSize: 1,
                callback: function(v){return Number.isInteger(v) ? v : null;}
              },
              grid: { color: "rgba(37,99,235,0.08)" },
            },
          },
        },
      });
      if (canvas.parentElement) {
        canvas.parentElement.style.borderRadius = "1rem";
      }
    }
    function renderKategoriList(kategoriMap) {
      const list = document.getElementById("list-kategori");
      if (!list) return;
      list.innerHTML = "";
      Object.entries(kategoriMap).forEach(([kategori, jumlah]) => {
        list.innerHTML += `<li><b>${kategori}:</b> ${jumlah} pembelian</li>`;
      });
    }
    function renderKategoriChartDummy() {
      const dummyMap = {
        "Konten Pembelajaran Digital": 3,
        "Simulasi Ujian": 2,
        "Kelas Menulis / Workshop": 1,
      };
      renderKategoriChart(dummyMap);
    }
    function renderKategoriListDummy() {
      const dummyMap = {
        "Konten Pembelajaran Digital": 3,
        "Simulasi Ujian": 2,
        "Kelas Menulis / Workshop": 1,
      };
      renderKategoriList(dummyMap);
    }
  </script>
</AdminLayout>

---
import Layout from '../layouts/Layout.astro';
import AdminSidebar from '../components/AdminSidebar.astro';
---

<Layout title="Admin Perpustakaan">
  <div class="min-h-screen bg-gray-50 flex">
    <div class="sticky top-0 h-screen hidden md:block">
      <AdminSidebar active="perpustakaan" />
    </div>
    <main class="flex-1 overflow-x-auto">
      <div class="max-w-4xl mx-auto px-4 py-8">
        <h1 class="text-2xl font-bold text-blue-700 mb-6">Manajemen E-Book Perpustakaan</h1>
        <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
          <form id="ebook-form" class="flex flex-col gap-4">
            <select id="kategori_id" class="border rounded p-2" required>
  <option value="">Pilih Kategori</option>
</select>
<select id="tema_id" class="border rounded p-2" required>
  <option value="">Pilih Tema</option>
</select>
            <input type="text" id="judul" class="border rounded p-2" placeholder="Judul Buku" required />
            <input type="text" id="penulis" class="border rounded p-2" placeholder="Penulis" required />
            <input type="number" id="tahun" class="border rounded p-2" placeholder="Tahun" min="1900" max="2100" />
            <input type="text" id="penerbit" class="border rounded p-2" placeholder="Penerbit" />
            <textarea id="deskripsi" class="border rounded p-2" placeholder="Deskripsi Buku (opsional)" rows="2"></textarea>
            <input type="url" id="cover" class="border rounded p-2" placeholder="Link Gambar Cover (opsional)" />
            <input type="file" id="cover-file" accept="image/*" class="border rounded p-2" />
            <div id="cover-preview" class="flex justify-center my-2"></div>
            <small class="text-xs text-gray-400">Pilih file untuk upload ke Cloudinary, atau isi URL manual di atas.</small>
            <input type="url" id="link" class="border rounded p-2" placeholder="Link E-Book (PDF/Google Drive)" required />
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded transition-all">Tambah Buku</button>
            <div id="ebook-message" class="text-center text-red-500"></div>
          </form>
        </div>
        <!-- Daftar kategori dan e-book sudah dipindah ke halaman admin-daftar-ebook.astro -->
      </div>
    </main>
  </div>
  <script type="module">
    import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';
    const supabase = createClient('https://jcfizceoycwdvpqpwhrj.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpjZml6Y2VveWN3ZHZwcXB3aHJqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NzUzNzUsImV4cCI6MjA2NDE1MTM3NX0.Au9FzSYvpaX7SkaVrgJvIgK9fZu5Dq4cU_NI5iwY6aA');

    // ====== Script Upload Cover ke Cloudinary ======
    const CLOUDINARY_CLOUD_NAME = "dr8gr1uy1";
    const CLOUDINARY_UNSIGNED_PRESET = "foto-penulis";
    const coverFileInput = document.getElementById('cover-file');
    const coverInput = document.getElementById('cover');
    const coverPreview = document.getElementById('cover-preview');
    coverFileInput.addEventListener('change', async (e) => {
      const file = e.target.files[0];
      if (!file) return;
      coverPreview.innerHTML = `<img src="${URL.createObjectURL(file)}" class="w-32 h-44 object-cover rounded shadow" />`;
      const formData = new FormData();
      formData.append('file', file);
      formData.append('upload_preset', CLOUDINARY_UNSIGNED_PRESET);
      coverInput.disabled = true;
      coverInput.placeholder = 'Mengupload...';
      try {
        const res = await fetch(`https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`, {
          method: 'POST',
          body: formData
        });
        const data = await res.json();
        if (data.secure_url) {
          coverInput.value = data.secure_url;
          coverInput.placeholder = 'Link Gambar Cover (opsional)';
        } else {
          coverInput.value = '';
          coverInput.placeholder = 'Gagal upload, coba lagi.';
        }
      } catch (err) {
        coverInput.value = '';
        coverInput.placeholder = 'Gagal upload, coba lagi.';
      }
      coverInput.disabled = false;
    });

    // ====== Fetch Kategori, Tema, dan Buku dari Supabase ======
    let categories = [];
    let ebooks = [];
    let temaList = [];
    const kategoriSelect = document.getElementById('kategori_id');
    const temaSelect = document.getElementById('tema_id');
    const kategoriList = document.getElementById('kategori-list');

    async function fetchCategoriesAndEbooks() {
      temaSelect.innerHTML = '<option value="">Pilih Tema</option>';
    
      const { data: cats, error: catErr } = await supabase.from('ebook_categories').select('*').order('nama', { ascending: true });
      if (catErr) {
        kategoriList.innerHTML = '<div class="text-center text-red-500">Gagal memuat kategori.</div>';
        return;
      }
      categories = cats;
      kategoriSelect.innerHTML = '<option value="">Pilih Kategori</option>' +
        categories.map(cat => `<option value="${cat.id}">${cat.nama}</option>`).join('');
      // Fetch semua tema (default: kosong, akan diisi saat kategori dipilih)
      temaList = [];
      // Fetch semua buku
      const { data: books, error: bookErr } = await supabase.from('ebooks').select('*');
      if (bookErr) {
        kategoriList.innerHTML = '<div class="text-center text-red-500">Gagal memuat buku.</div>';
        return;
      }
      ebooks = books;
      renderCategoriesAndEbooks();
    }

    function renderCategoriesAndEbooks() {
      kategoriList.innerHTML = '';
      if (categories.length === 0) {
        kategoriList.innerHTML = '<div class="text-center text-gray-400">Belum ada kategori.</div>';
        return;
      }
      categories.forEach(cat => {
        const section = document.createElement('section');
        section.className = 'mb-12';
        section.innerHTML = `
          <h2 class="text-xl font-bold mb-4">${cat.nama}</h2>
          <div class="grid md:grid-cols-3 gap-6">
            ${ebooks.filter(b => b.kategori_id === cat.id).length === 0
              ? '<div class="col-span-3 text-center text-gray-400">Belum ada buku.</div>'
              : ebooks.filter(b => b.kategori_id === cat.id).map(buku => `
                <div class="bg-white rounded-xl shadow p-4 flex flex-col items-center" key="${buku.id}">
                  <img src="${buku.cover || '/default-cover.png'}" alt="Cover Buku" class="w-32 h-44 object-cover rounded mb-2" />
                  <div class="font-bold mt-2 text-center">${buku.judul}</div>
                  <div class="text-sm text-gray-500 mb-1">${buku.penulis}${buku.tahun ? ', ' + buku.tahun : ''}</div>
                  ${buku.penerbit ? `<div class='text-xs text-gray-400 mb-1'>Penerbit: ${buku.penerbit}</div>` : ''}
                  ${buku.deskripsi ? `<div class='text-xs text-gray-500 mb-2 italic'>${buku.deskripsi}</div>` : ''}
                  <a href="${buku.link}" target="_blank" class="px-4 py-2 bg-blue-500 text-white rounded-full font-semibold mt-auto">Baca Sekarang</a>
                </div>
              `).join('')}
          </div>
        `;
        kategoriList.appendChild(section);
      });
    }

    fetchCategoriesAndEbooks();

    // Fetch tema sesuai kategori
    async function fetchTemaByKategori(kategoriId) {
      if (!kategoriId) {
        temaSelect.innerHTML = '<option value="">Pilih Tema</option>';
        temaList = [];
        return;
      }
      const { data, error } = await supabase.from('ebook_themes').select('id, name').eq('category_id', kategoriId);
      temaList = data || [];
      temaSelect.innerHTML = '<option value="">Pilih Tema</option>' +
        temaList.map(t => `<option value="${t.id}">${t.name}</option>`).join('');
    }
    kategoriSelect.addEventListener('change', e => {
      fetchTemaByKategori(e.target.value);
    });

    // ====== Handler Form Tambah Buku ======
    document.getElementById('ebook-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      const kategori_id = kategoriSelect.value;
      const tema_id = temaSelect.value;
      const judul = document.getElementById('judul').value.trim();
      const penulis = document.getElementById('penulis').value.trim();
      const tahun = document.getElementById('tahun').value;
      const cover = document.getElementById('cover').value.trim();
      const link = document.getElementById('link').value.trim();
      const penerbit = document.getElementById('penerbit').value.trim();
      const deskripsi = document.getElementById('deskripsi').value.trim();
      if (!kategori_id || !tema_id || !judul || !penulis || !link) {
        document.getElementById('ebook-message').textContent = 'Kategori, tema, judul, penulis, dan link buku wajib diisi!';
        return;
      }
      const { error } = await supabase.from('ebooks').insert([
        { kategori_id, tema_id, judul, penulis, tahun: tahun ? parseInt(tahun) : null, penerbit, deskripsi, cover, link }
      ]);
      if (error) {
        document.getElementById('ebook-message').textContent = 'Gagal menambah buku: ' + error.message;
        return;
      }
      alert('Ebook berhasil ditambah!');
      document.getElementById('ebook-message').textContent = '';
      this.reset();
      coverPreview.innerHTML = '';
      await fetchCategoriesAndEbooks();
      temaSelect.innerHTML = '<option value="">Pilih Tema</option>';
    });
  </script>
</Layout>
